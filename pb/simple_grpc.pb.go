// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: simple.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VariableServiceClient is the client API for VariableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VariableServiceClient interface {
	GetMyVariable(ctx context.Context, in *GetMyVariableRequest, opts ...grpc.CallOption) (*GetMyVariableResponse, error)
	ListAllMyVariables(ctx context.Context, in *ListMyAllVariableRequest, opts ...grpc.CallOption) (*ListAllMyVariableResponse, error)
	DeleteAllMyVariables(ctx context.Context, in *DeleteAllMyVariableRequest, opts ...grpc.CallOption) (*DeleteAllMyVariableResponse, error)
}

type variableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVariableServiceClient(cc grpc.ClientConnInterface) VariableServiceClient {
	return &variableServiceClient{cc}
}

func (c *variableServiceClient) GetMyVariable(ctx context.Context, in *GetMyVariableRequest, opts ...grpc.CallOption) (*GetMyVariableResponse, error) {
	out := new(GetMyVariableResponse)
	err := c.cc.Invoke(ctx, "/simple.VariableService/GetMyVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableServiceClient) ListAllMyVariables(ctx context.Context, in *ListMyAllVariableRequest, opts ...grpc.CallOption) (*ListAllMyVariableResponse, error) {
	out := new(ListAllMyVariableResponse)
	err := c.cc.Invoke(ctx, "/simple.VariableService/ListAllMyVariables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableServiceClient) DeleteAllMyVariables(ctx context.Context, in *DeleteAllMyVariableRequest, opts ...grpc.CallOption) (*DeleteAllMyVariableResponse, error) {
	out := new(DeleteAllMyVariableResponse)
	err := c.cc.Invoke(ctx, "/simple.VariableService/DeleteAllMyVariables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VariableServiceServer is the server API for VariableService service.
// All implementations must embed UnimplementedVariableServiceServer
// for forward compatibility
type VariableServiceServer interface {
	GetMyVariable(context.Context, *GetMyVariableRequest) (*GetMyVariableResponse, error)
	ListAllMyVariables(context.Context, *ListMyAllVariableRequest) (*ListAllMyVariableResponse, error)
	DeleteAllMyVariables(context.Context, *DeleteAllMyVariableRequest) (*DeleteAllMyVariableResponse, error)
	mustEmbedUnimplementedVariableServiceServer()
}

// UnimplementedVariableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVariableServiceServer struct {
}

func (UnimplementedVariableServiceServer) GetMyVariable(context.Context, *GetMyVariableRequest) (*GetMyVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyVariable not implemented")
}
func (UnimplementedVariableServiceServer) ListAllMyVariables(context.Context, *ListMyAllVariableRequest) (*ListAllMyVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllMyVariables not implemented")
}
func (UnimplementedVariableServiceServer) DeleteAllMyVariables(context.Context, *DeleteAllMyVariableRequest) (*DeleteAllMyVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMyVariables not implemented")
}
func (UnimplementedVariableServiceServer) mustEmbedUnimplementedVariableServiceServer() {}

// UnsafeVariableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VariableServiceServer will
// result in compilation errors.
type UnsafeVariableServiceServer interface {
	mustEmbedUnimplementedVariableServiceServer()
}

func RegisterVariableServiceServer(s grpc.ServiceRegistrar, srv VariableServiceServer) {
	s.RegisterService(&VariableService_ServiceDesc, srv)
}

func _VariableService_GetMyVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServiceServer).GetMyVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.VariableService/GetMyVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServiceServer).GetMyVariable(ctx, req.(*GetMyVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VariableService_ListAllMyVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyAllVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServiceServer).ListAllMyVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.VariableService/ListAllMyVariables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServiceServer).ListAllMyVariables(ctx, req.(*ListMyAllVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VariableService_DeleteAllMyVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllMyVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServiceServer).DeleteAllMyVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.VariableService/DeleteAllMyVariables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServiceServer).DeleteAllMyVariables(ctx, req.(*DeleteAllMyVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VariableService_ServiceDesc is the grpc.ServiceDesc for VariableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VariableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simple.VariableService",
	HandlerType: (*VariableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMyVariable",
			Handler:    _VariableService_GetMyVariable_Handler,
		},
		{
			MethodName: "ListAllMyVariables",
			Handler:    _VariableService_ListAllMyVariables_Handler,
		},
		{
			MethodName: "DeleteAllMyVariables",
			Handler:    _VariableService_DeleteAllMyVariables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple.proto",
}
